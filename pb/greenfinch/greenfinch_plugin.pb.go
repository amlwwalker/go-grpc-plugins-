//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.6
// source: greenfinch.proto

package greenfinch

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
)

const PluginPluginAPIVersion = 1

//export plugin_api_version
func _plugin_api_version() uint64 {
	return PluginPluginAPIVersion
}

var plugin Plugin

func RegisterPlugin(p Plugin) {
	plugin = p
}

//export plugin_init
func _plugin_init(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req PluginInit
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := plugin.Init(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export plugin_content
func _plugin_content(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := plugin.Content(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//export plugin_setting
func _plugin_setting(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	var req emptypb.Empty
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := plugin.Setting(context.Background(), req)
	if err != nil {
		return 0
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type greenfinchFunctions struct{}

func NewGreenfinchFunctions() GreenfinchFunctions {
	return greenfinchFunctions{}
}

//go:wasm-module env
//export request_sign
func _request_sign(ptr uint32, size uint32) uint64

func (h greenfinchFunctions) RequestSign(ctx context.Context, request Payload) (response SignResponse, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _request_sign(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}

//go:wasm-module env
//export log
func _log(ptr uint32, size uint32) uint64

func (h greenfinchFunctions) Log(ctx context.Context, request LogRequest) (response emptypb.Empty, err error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return response, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _log(ptr, size)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	if err = response.UnmarshalVT(buf); err != nil {
		return response, err
	}
	return response, nil
}
