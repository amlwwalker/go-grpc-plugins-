// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.6
// source: greenfinch.proto

package greenfinch

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The plugin initialisation message
type PluginInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PluginInit) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

// The plugin initialisation message
type PluginContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PluginContent) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// The plugin initialisation message
type PluginSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PluginSetting) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

type PluginReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginId string `protobuf:"bytes,1,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *PluginReply) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginReply) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *PluginReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Meta    string `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Payload) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *Payload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *Payload) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

type SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedPayload string `protobuf:"bytes,1,opt,name=signedPayload,proto3" json:"signedPayload,omitempty"`
}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SignResponse) GetSignedPayload() string {
	if x != nil {
		return x.SignedPayload
	}
	return ""
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *LogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//A plugin will offer this array of functions that the host can call upon
//go:plugin type=plugin version=1
type Plugin interface {
	Init(context.Context, PluginInit) (PluginReply, error)
	Content(context.Context, emptypb.Empty) (PluginContent, error)
	Setting(context.Context, emptypb.Empty) (PluginContent, error)
}

// The host functions embedded into the plugin
// go:plugin type=host
type GreenfinchFunctions interface {
	RequestSign(context.Context, Payload) (SignResponse, error)
	Log(context.Context, LogRequest) (emptypb.Empty, error)
}
